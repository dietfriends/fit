// Autogenerated from Pigeon (v0.1.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = [NSDictionary dictionaryWithObjectsAndKeys:
        (error.code ? error.code : [NSNull null]), @"code",
        (error.message ? error.message : [NSNull null]), @"message",
        (error.details ? error.details : [NSNull null]), @"details",
        nil];
  }
  return [NSDictionary dictionaryWithObjectsAndKeys:
      (result ? result : [NSNull null]), @"result",
      errorDict, @"error",
      nil];
}

@interface FLTActivityType ()
+(FLTActivityType*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTUint8List ()
+(FLTUint8List*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTListActivityLogsResponse ()
+(FLTListActivityLogsResponse*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTListActivityLogsReuqest ()
+(FLTListActivityLogsReuqest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation FLTActivityType
+(FLTActivityType*)fromMap:(NSDictionary*)dict {
  FLTActivityType* result = [[FLTActivityType alloc] init];
  result.source = dict[@"source"];
  if ((NSNull *)result.source == [NSNull null]) {
    result.source = nil;
  }
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.code = dict[@"code"];
  if ((NSNull *)result.code == [NSNull null]) {
    result.code = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.source ? self.source : [NSNull null]), @"source", (self.name ? self.name : [NSNull null]), @"name", (self.code ? self.code : [NSNull null]), @"code", nil];
}
@end

@implementation FLTUint8List
+(FLTUint8List*)fromMap:(NSDictionary*)dict {
  FLTUint8List* result = [[FLTUint8List alloc] init];
  result.bytesPerElement = dict[@"bytesPerElement"];
  if ((NSNull *)result.bytesPerElement == [NSNull null]) {
    result.bytesPerElement = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.bytesPerElement ? self.bytesPerElement : [NSNull null]), @"bytesPerElement", nil];
}
@end

@implementation FLTListActivityLogsResponse
+(FLTListActivityLogsResponse*)fromMap:(NSDictionary*)dict {
  FLTListActivityLogsResponse* result = [[FLTListActivityLogsResponse alloc] init];
  result.activityLogs = dict[@"activityLogs"];
  if ((NSNull *)result.activityLogs == [NSNull null]) {
    result.activityLogs = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.activityLogs ? self.activityLogs : [NSNull null]), @"activityLogs", nil];
}
@end

@implementation FLTListActivityLogsReuqest
+(FLTListActivityLogsReuqest*)fromMap:(NSDictionary*)dict {
  FLTListActivityLogsReuqest* result = [[FLTListActivityLogsReuqest alloc] init];
  result.startDate = dict[@"startDate"];
  if ((NSNull *)result.startDate == [NSNull null]) {
    result.startDate = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.startDate ? self.startDate : [NSNull null]), @"startDate", nil];
}
@end

void FLTFitApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FLTFitApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.FitApi.initialize"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api initialize:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.FitApi.dispose"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api dispose:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.FitApi.getActivityType"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTUint8List *input = [FLTUint8List fromMap:message];
        FLTActivityType *output = [api getActivityType:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.FitApi.listActivityLogs"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTListActivityLogsReuqest *input = [FLTListActivityLogsReuqest fromMap:message];
        FLTListActivityLogsResponse *output = [api listActivityLogs:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
