// Autogenerated from Pigeon (v0.1.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.8
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import 'messages.dart';

abstract class TestHostFitApi {
  void initialize();
  void dispose();
  ProtoWrapper getActivityType(ProtoWrapper arg);
  ProtoWrapper listActivityLogs(ProtoWrapper arg);
  static void setup(TestHostFitApi api) {
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.FitApi.initialize', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object message) async {
          // ignore message
          api.initialize();
          return <Object, Object>{};
        });
      }
    }
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.FitApi.dispose', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object message) async {
          // ignore message
          api.dispose();
          return <Object, Object>{};
        });
      }
    }
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.FitApi.getActivityType', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FitApi.getActivityType was null. Expected ProtoWrapper.');
          final ProtoWrapper input = ProtoWrapper.decode(message);
          final ProtoWrapper output = api.getActivityType(input);
          return <Object, Object>{'result': output.encode()};
        });
      }
    }
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.FitApi.listActivityLogs', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FitApi.listActivityLogs was null. Expected ProtoWrapper.');
          final ProtoWrapper input = ProtoWrapper.decode(message);
          final ProtoWrapper output = api.listActivityLogs(input);
          return <Object, Object>{'result': output.encode()};
        });
      }
    }
  }
}
