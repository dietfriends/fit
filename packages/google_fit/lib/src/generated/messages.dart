// Autogenerated from Pigeon (v2.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

enum DataSourceType {
  TYPE_DERIVED,
  TYPE_RAW,
}

class DataType {
  DataType({
    required this.name,
    required this.readScope,
    required this.writeScope,
    this.aggregateType,
  });

  String name;
  String readScope;
  String writeScope;
  DataType? aggregateType;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['name'] = name;
    pigeonMap['readScope'] = readScope;
    pigeonMap['writeScope'] = writeScope;
    pigeonMap['aggregateType'] = aggregateType == null ? null : aggregateType!.encode();
    return pigeonMap;
  }

  static DataType decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return DataType(
      name: pigeonMap['name']! as String,
      readScope: pigeonMap['readScope']! as String,
      writeScope: pigeonMap['writeScope']! as String,
      aggregateType: pigeonMap['aggregateType'] != null
          ? DataType.decode(pigeonMap['aggregateType']!)
          : null,
    );
  }
}

class DataSource {
  DataSource({
    this.appPackageName,
    this.dateType,
    this.streamIdentifier,
    this.streamName,
    this.type,
  });

  String? appPackageName;
  DataType? dateType;
  String? streamIdentifier;
  String? streamName;
  DataSourceType? type;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['appPackageName'] = appPackageName;
    pigeonMap['dateType'] = dateType == null ? null : dateType!.encode();
    pigeonMap['streamIdentifier'] = streamIdentifier;
    pigeonMap['streamName'] = streamName;
    pigeonMap['type'] = type == null ? null : type!.index;
    return pigeonMap;
  }

  static DataSource decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return DataSource(
      appPackageName: pigeonMap['appPackageName'] as String?,
      dateType: pigeonMap['dateType'] != null
          ? DataType.decode(pigeonMap['dateType']!)
          : null,
      streamIdentifier: pigeonMap['streamIdentifier'] as String?,
      streamName: pigeonMap['streamName'] as String?,
      type: pigeonMap['type'] != null
          ? DataSourceType.values[pigeonMap['type']! as int]
          : null,
    );
  }
}

class DataPoint {
  DataPoint({
    this.dataSource,
  });

  DataSource? dataSource;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['dataSource'] = dataSource == null ? null : dataSource!.encode();
    return pigeonMap;
  }

  static DataPoint decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return DataPoint(
      dataSource: pigeonMap['dataSource'] != null
          ? DataSource.decode(pigeonMap['dataSource']!)
          : null,
    );
  }
}

class DataSet {
  DataSet({
    this.dataType,
    required this.dataPoints,
  });

  DataType? dataType;
  List<DataPoint?> dataPoints;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['dataType'] = dataType == null ? null : dataType!.encode();
    pigeonMap['dataPoints'] = dataPoints;
    return pigeonMap;
  }

  static DataSet decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return DataSet(
      dataType: pigeonMap['dataType'] != null
          ? DataType.decode(pigeonMap['dataType']!)
          : null,
      dataPoints: (pigeonMap['dataPoints'] as List<Object?>?)!.cast<DataPoint?>(),
    );
  }
}

class _HistoryClientCodec extends StandardMessageCodec {
  const _HistoryClientCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is DataPoint) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is DataSet) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is DataSource) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is DataType) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return DataPoint.decode(readValue(buffer)!);
      
      case 129:       
        return DataSet.decode(readValue(buffer)!);
      
      case 130:       
        return DataSource.decode(readValue(buffer)!);
      
      case 131:       
        return DataType.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class HistoryClient {
  /// Constructor for [HistoryClient].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HistoryClient({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _HistoryClientCodec();

  Future<DataSet> readDailyTotal(DataType arg_dataType) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HistoryClient.readDailyTotal', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_dataType]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as DataSet?)!;
    }
  }

  Future<DataSet> readDailyTotalFromLocalDevice(DataType arg_dataType) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HistoryClient.readDailyTotalFromLocalDevice', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_dataType]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as DataSet?)!;
    }
  }
}
